<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="abc_payment">

	<!-- 결제목록 -->
	<select id="selectPaymentList" resultType="map">
		/* SQL_ID : abc_payment.selectPaymentList */
		SELECT
			wap.pay_no,
			wap.admin_no,
			wap.exp_no,
			wap.estimate_no,
			wap.approval_no,
			wap.work_no,
			wap.amount_type,
			wap.pay_type,
			wap.total_pay_price,
			ceil(wap.total_pay_price/1.1) sales_price,
			wap.total_pay_price - ceil(wap.total_pay_price/1.1) tax_price,
			wap.paid_amount,
			wap.pay_date,
			wap.paid_date,
			wap.paid_proc_date,
			wap.paid_proc_admin_no,
			F_GET_ADMIN_NAME(wap.paid_proc_admin_no) paid_proc_admin_name,
			wap.stat,
			wap.confirm_date,
			wap.confirm_admin_no,
			wap.remarks,
			wap.pay_bill_stat,
			wap.pay_bill_type,
			wap.pay_bill_no,
			wap.pay_approval_no,
			wap.pay_bill_yymmdd,
			wap.pay_bill_date,
			wap.pay_bill_email,
			wap.pay_bill_comp_number,
			wap.pay_bill_admin_no,
			F_GET_ADMIN_NAME(wap.pay_bill_admin_no) pay_bill_admin_name,
			wap.del_yn,
			wap.create_no,
			wap.create_date,
			wap.update_no,
			wap.update_date,
			ww.work_id,
			ww.work_target,
			ww.req_name,
			F_GET_ADMIN_NAME(ww.manager_admin_no) manager_admin_name,
			ww.location_name,
			wc.customer_name,
			wcb.branch_name,
			wcb.manager_name,
			ww.work_target,
			DATEDIFF(DATE_FORMAT(now(), '%Y%m%d'), DATE_FORMAT(wap.pay_date, '%Y%m%d')) date_diff,
			ifnull(wii.img_url,'') as img_url
		FROM
			w_abc_payment wap
				inner join w_work ww on(wap.work_no = ww.work_no)
				left join w_customer_branch wcb on(wcb.branch_no = ww.branch_no)
				left join w_customer wc on(wc.customer_no = wcb.customer_no)
				LEFT JOIN w_img_info wii ON (wii.key_no = wap.pay_no AND wii.img_type = 'IMG_TYPE_SOLE_PROPRIETOR_BUSS')
		WHERE wap.del_yn != 'Y'
		AND ww.delete_yn != 'Y'
		<if test="start_dt != null and start_dt != ''">
			<if test="end_dt != null and end_dt != ''">
		AND wap.pay_bill_yymmdd between #{start_dt} and #{end_dt}
			</if>
		</if>
		<if test="req_name != null and req_name != ''">
			AND ww.req_name LIKE concat('%', #{req_name}, '%')
		</if>
		<if test="work_id != null and work_id != ''">
			AND ww.work_id LIKE concat('%', #{work_id}, '%')
		</if>
		<if test="location_name != null and location_name != ''">
			AND ww.location_name LIKE concat('%', #{location_name}, '%')
		</if>
		<if test="work_target != null and work_target != ''">
			AND ww.work_target = #{work_target}
		</if>
		ORDER BY
			wap.pay_no DESC
		<if test="pageFirst != null and pageFirst != ''">
		LIMIT #{pageFirst}, #{pageLast}
		</if>
	</select>

	<select id="selectPaymentListCnt" resultType="int">
		/* SQL_ID : payment.listPaymentCnt */
		SELECT
			count(1) as totalRecords
		FROM
			w_abc_payment wap
				inner join w_work ww on(wap.work_no = ww.work_no)
		WHERE wap.del_yn != 'Y'
		AND ww.delete_yn != 'Y'
		<if test="start_dt != null and start_dt != ''">
			<if test="end_dt != null and end_dt != ''">
		AND wap.pay_bill_yymmdd between #{start_dt} and #{end_dt}
			</if>
		</if>
		<if test="req_name != null and req_name != ''">
			AND ww.req_name LIKE concat('%', #{req_name}, '%')
		</if>
		<if test="work_id != null and work_id != ''">
			AND ww.work_id LIKE concat('%', #{work_id}, '%')
		</if>
		<if test="location_name != null and location_name != ''">
			AND ww.location_name LIKE concat('%', #{location_name}, '%')
		</if>
		<if test="work_target != null and work_target != ''">
			AND ww.work_target = #{work_target}
		</if>

	</select>
<!-- 결제목록 work_no -->
	<select id="selectPaymentListByWorkNo" resultType="map">
		/* SQL_ID : abc_payment.selectPaymentList */
		SELECT
			wap.pay_no,
			wap.admin_no,
			wap.exp_no,
			wap.estimate_no,
			wap.approval_no,
			wap.work_no,
			wap.amount_type,
			wap.pay_type,
			wap.total_pay_price,
			wap.paid_amount,
			wap.pay_date,
			wap.paid_date,
			wap.paid_proc_date,
			wap.paid_proc_admin_no,
			F_GET_ADMIN_NAME(wap.paid_proc_admin_no) paid_proc_admin_name,
			wap.stat,
			wap.confirm_date,
			wap.confirm_admin_no,
			wap.remarks,
			wap.pay_bill_stat,
			wap.pay_bill_type,
			wap.pay_bill_no,
			wap.pay_approval_no,
			wap.pay_bill_yymmdd,
			wap.pay_bill_date,
			wap.pay_bill_email,
			wap.pay_bill_comp_number,
			wap.pay_bill_admin_no,
			F_GET_ADMIN_NAME(wap.pay_bill_admin_no) pay_bill_admin_name,
			wap.del_yn,
			wap.create_no,
			wap.create_date,
			wap.update_no,
			wap.update_date,
			ww.work_id,
			ww.work_target,
			ww.req_name,
			F_GET_ADMIN_NAME(ww.manager_admin_no) manager_admin_name,
			ww.location_name
		FROM
			w_abc_payment wap
				inner join w_work ww on(wap.work_no = ww.work_no)
		WHERE wap.del_yn != 'Y'
		AND ww.delete_yn != 'Y'
		<if test="work_no != null and work_no != ''">
		AND wap.work_no = ${work_no}
		</if>
		ORDER BY
			wap.pay_date
	</select>

	<select id="selectPayment" resultType="map">
		/* SQL_ID : abc_payment.selectPayment */
		SELECT
			wap.pay_no,
			wap.admin_no,
			wap.exp_no,
			wap.estimate_no,
			wap.approval_no,
			wap.work_no,
			wap.amount_type,
			wap.pay_type,
			wap.total_pay_price,
			wap.paid_amount,
			wap.pay_date,
			wap.paid_date,
			wap.stat,
			wap.confirm_date,
			wap.confirm_admin_no,
			wap.remarks,
			wap.pay_bill_stat,
			wap.pay_bill_type,
			wap.pay_bill_no,
			wap.pay_approval_no,
			wap.pay_bill_yymmdd,
			wap.pay_bill_date,
			wap.pay_bill_email,
			wap.pay_bill_comp_number,
			wap.del_yn,
			wap.create_no,
			wap.create_date,
			wap.update_no,
			wap.update_date,
			ww.work_id,
			ww.work_target,
			ww.req_name,
			F_GET_ADMIN_NAME(ww.manager_admin_no) manager_admin_name,
			ww.location_name
		FROM
			w_abc_payment wap
				inner join w_work ww on(wap.work_no = ww.work_no)
		WHERE
			wap.pay_no = #{pay_no }

	</select>

	<insert id="insertPayment" useGeneratedKeys="true" keyProperty="key_no">
		/* SQL_ID : abc_payment.insertPayment */
		INSERT INTO w_abc_payment (
			admin_no,
			exp_no,
			estimate_no,
			approval_no,
			work_no,
			amount_type,
			pay_type,
			total_pay_price,
			paid_amount,
			pay_date,
			paid_date,
			stat,
			confirm_date,
			confirm_admin_no,
			remarks,

			pay_bill_stat,
			pay_bill_type,
			pay_bill_no,
			pay_approval_no,
			pay_bill_yymmdd,
			pay_bill_date,
			pay_bill_email,
			pay_bill_comp_number,
			del_yn,

			create_no,
			create_date,
			update_no,
			update_date
		) VALUES (
			#{admin_no},
			#{exp_no},
			#{estimate_no},
			#{approval_no},
			#{work_no},
			#{amount_type},
			#{pay_type},
			#{total_pay_price},
			#{paid_amount},
			DATE_FORMAT(#{pay_date},'%Y%m%d'),
			DATE_FORMAT(#{paid_date},'%Y%m%d'),
			#{stat},
			#{confirm_date},
			#{confirm_admin_no},
			#{remarks},

			#{pay_bill_stat},
			#{pay_bill_type},
			#{pay_bill_no},
			#{pay_approval_no},
			#{pay_bill_yymmdd},
			#{pay_bill_date},
			#{pay_bill_email},
			#{pay_bill_comp_number},
			#{del_yn},
			#{create_no},

			now(),
			#{update_no},
			now()
		)
	</insert>

	<update id="updatePayment">
		/* SQL_ID : abc_payment.updatePayment */
		UPDATE w_abc_payment SET
			admin_no = #{admin_no},
			exp_no = #{exp_no},
			estimate_no = #{estimate_no},
			approval_no = #{approval_no},
			work_no = #{work_no},
			amount_type = #{amount_type},
			pay_type = #{pay_type},
			total_pay_price = #{total_pay_price},
			paid_amount = #{paid_amount},
			pay_date = #{pay_date},
			paid_date = #{paid_date},
			stat = #{stat},
			confirm_date = #{confirm_date},
			confirm_admin_no = #{confirm_admin_no},
			remarks = #{remarks},
			pay_bill_stat = #{pay_bill_stat},
			pay_bill_type = #{pay_bill_type},
			pay_bill_no = #{pay_bill_no},
			pay_approval_no = #{pay_approval_no},
			pay_bill_yymmdd = #{pay_bill_yymmdd},
			pay_bill_date = #{pay_bill_date},
			pay_bill_email = #{pay_bill_email},
			pay_bill_comp_number = #{pay_bill_comp_number},
			del_yn = #{del_yn},
			update_no = #{update_no},
			update_date = now()
		WHERE
			pay_no = #{pay_no}
	</update>

	<update id="deletePayment">
		/* SQL_ID : abc_payment.deletePayment */
		UPDATE w_abc_payment SET
		    del_yn = #{del_yn},
		    update_no = #{update_no},
		    update_date = now()
		WHERE
			pay_no = #{pay_no}
	</update>


	<update id="updatePaymentApproval">
		/* SQL_ID : abc_payment.updatePaymentApproval */
		UPDATE w_abc_payment SET
			pay_bill_stat = #{pay_bill_stat},
			pay_bill_type = #{pay_bill_type},
			<if test="pay_bill_no != null and pay_bill_no != ''">
			pay_bill_no 	= #{pay_bill_no},
			</if>
			<if test="pay_bill_email != null and pay_bill_email != ''">
			pay_bill_email = #{pay_bill_email},
			</if>
			pay_approval_no = #{pay_approval_no},
			pay_bill_yymmdd = #{pay_bill_yymmdd},
			pay_bill_date = now(),
			pay_bill_comp_number = #{pay_bill_comp_number},
			pay_bill_admin_no = #{update_no}
		WHERE
			pay_no = #{pay_no}
	</update>


	<update id="updatePaymentComplete">
		/* SQL_ID : abc_payment.updatePaymentComplete */
		UPDATE w_abc_payment SET
			pay_type = #{pay_type},
			paid_date = #{paid_date},
			paid_proc_date = now(),
			paid_proc_admin_no = #{update_no},
			paid_amount = total_pay_price ,
			stat = #{stat}
		WHERE
			pay_no = #{pay_no}
	</update>

	<update id="updatePaymentStat">
		/* SQL_ID : abc_payment.updatePaymentStat */
		UPDATE w_abc_payment SET
			stat = #{stat},
			update_no = #{update_no},
			update_date = now()
		WHERE
			pay_no = #{pay_no}
	</update>

	<update id="updatePaymentInfo">
		/* SQL_ID : abc_payment.updatePaymentInfo */
		UPDATE w_abc_payment SET
			paid_date = #{paid_date},
			pay_type = #{pay_type},
			pay_bill_type = #{pay_bill_type},
			pay_bill_yymmdd = #{pay_bill_yymmdd},
			pay_approval_no = #{pay_approval_no},
			update_no = #{update_no},
			update_date = now()
		WHERE
			pay_no = #{pay_no}
	</update>

</mapper>
